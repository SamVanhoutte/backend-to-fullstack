@page "/pics"
@page "/pics/{SearchTerm}"
@using PictureApp.Data
@using MudBlazor.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable
@inject PictureService PictureService
@inject IBrowserViewportService BrowserViewportService
<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h1">Picture overview</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Details">
                <MudText Typo="Typo.body1">@($"{breakPoint} - width: {width} x height: {height}")</MudText>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    @if (pictures != null)
    {
        @foreach (var picture in pictures)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard>
                <MudCardMedia Image="@picture.ImageUrl" Height="200" />
                <MudCardContent>
                    <MudText Typo="Typo.caption" Align="Align.Center">@picture.Source</MudText>
                    <MudText Typo="Typo.body1">@picture.Description</MudText>
                    <MudText Typo="Typo.body2">@picture.FileType</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Href="@picture.ImageUrl" Target="_blank" Color="Color.Primary">View</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                </MudCardActions>
            </MudCard>

            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
            <MudText Typo="Typo.caption" Color="Color.Warning">Pictures loading</MudText>
        </MudItem>
    }
    
</MudGrid>

@if (pictures != null)
{
    @foreach (var picture in pictures)
    {
        @* <MudImage Src="@picture.ImageUrl"></MudImage> *@
    }
    
}
@code {
    [Parameter]
    public string? SearchTerm { get; set; }

    int width;
    int height;
    
    List<Picture> pictures;
    private Breakpoint breakPoint;

    protected override async Task OnInitializedAsync()
    {
        pictures = await PictureService.PickPicturesAsync(SearchTerm ?? "Bikepacking", 8);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    
    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        width = browserViewportEventArgs.BrowserWindowSize.Width;
        height = browserViewportEventArgs.BrowserWindowSize.Height;
        breakPoint = browserViewportEventArgs.Breakpoint;
        return InvokeAsync(StateHasChanged);
    }
}